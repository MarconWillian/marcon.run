
name: Production
on:
  push:
    branches:
      - 'main'

jobs:
  deploy:
    name: 'Deploy - Terraform'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://mh4sh.dev

    env:
      TF_VAR_gcp_project_id: ${{ vars.GCP_PROJECT_ID }}
      TF_VAR_gcp_key_file: ${{ secrets.GCP_SERVICE_KEY }}
      TF_VAR_vercel_org_id: ${{ vars.VERCEL_ORG_ID }}
      TF_VAR_vercel_token: ${{ secrets.VERCEL_TOKEN }}
      TF_VAR_doppler_project: ${{ vars.DOPPLER_PROJECT }}
      TF_VAR_doppler_token: ${{ secrets.DOPPLER_TOKEN }}
      TF_VAR_domain_deploy: mh4sh.dev
      TF_VAR_environment: production
      TF_VAR_project_name: mh4sh-home
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ env.TF_VAR_gcp_key_file }}

    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Terraform Init
      id: init
      run: terraform init -backend-config="prefix=terraform/mh4sh/${{ env.TF_VAR_environment }}/vercel/${{ env.TF_VAR_project_name }}"

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve